var documenterSearchIndex = {"docs":
[{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"EditURL = \"https://github.com/cossio/CenteredRBMs.jl/blob/master/docs/src/literate/MNIST.jl\"","category":"page"},{"location":"literate/MNIST/#MNIST","page":"MNIST","title":"MNIST","text":"","category":"section"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"We begin by importing the required packages. We load MNIST via the MLDatasets.jl package.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"import Makie\nimport CairoMakie\nusing Random: bitrand\nusing Statistics: mean\nimport MLDatasets\nimport Flux\nimport RestrictedBoltzmannMachines as RBMs\nusing ValueHistories: MVHistory\nimport CenteredRBMs\nusing RestrictedBoltzmannMachines: BinaryRBM\nnothing #hide","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Useful function to plot MNIST digits.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"\"\"\"\n    imggrid(A)\n\nGiven a four dimensional tensor `A` of size `(width, height, ncols, nrows)`\ncontaining `width x height` images in a grid of `nrows x ncols`, this returns\na matrix of size `(width * ncols, height * nrows)`, that can be plotted in a heatmap\nto display all images.\n\"\"\"\nfunction imggrid(A::AbstractArray{<:Any,4})\n    reshape(permutedims(A, (1,3,2,4)), size(A,1)*size(A,3), size(A,2)*size(A,4))\nend","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Load the MNIST dataset. We only work with 0s and 1s for speed.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Float = Float32\ntrain_x, train_y = MLDatasets.MNIST.traindata()\ntrain_x = Array{Float}(train_x[:, :, train_y .∈ Ref((0,1))] .> 0.5)\nprintln(size(train_x, 3), \" train samples, with \", count(train_y .== 0), \" zeros and \", count(train_y .== 1), \" ones.\")\nnothing #hide","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Initialize and train a centered RBM","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"rbm_c = CenteredRBMs.center(BinaryRBM(Float, (28,28), 400))\nRBMs.initialize!(rbm_c, train_x) # centers from data\nbatchsize = 256\noptim = Flux.ADAM()\nvm = bitrand(28, 28, batchsize) # fantasy chains\nhistory_c = MVHistory()\npush!(history_c, :lpl, mean(RBMs.log_pseudolikelihood(rbm_c, train_x)))\npush!(history_c, :Δt, 0.0)\n@time for epoch in 1:100 # track pseudolikelihood every 5 epochs\n    Δt = @elapsed RBMs.pcd!(rbm_c, train_x; epochs=5, vm, batchsize, optim)\n    push!(history_c, :lpl, mean(RBMs.log_pseudolikelihood(rbm_c, train_x)))\n    push!(history_c, :Δt, Δt)\nend\nrbm_c = CenteredRBMs.uncenter(rbm_c) # convert to equivalent RBM (without offsets)\nnothing #hide","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"For comparison, we also train a normal (uncentered) RBM.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"rbm_u = BinaryRBM(Float, (28,28), 400)\nRBMs.initialize!(rbm_u, train_x)\nvm = bitrand(28, 28, batchsize)\nhistory_u = MVHistory()\npush!(history_u, :lpl, mean(RBMs.log_pseudolikelihood(rbm_u, train_x)))\npush!(history_u, :Δt, 0.0)\n@time for epoch in 1:100 # track pseudolikelihood every 5 epochs\n    Δt = @elapsed RBMs.pcd!(rbm_u, train_x; epochs=5, vm, batchsize, optim, center=false)\n    push!(history_u, :lpl, mean(RBMs.log_pseudolikelihood(rbm_u, train_x)))\n    push!(history_u, :Δt, Δt)\nend\nnothing #hide","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Plot log-pseudolikelihood of train data during learning.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"fig = Makie.Figure(resolution=(600, 300))\nax = Makie.Axis(fig[1,1], xlabel=\"epochs\", ylabel=\"pseudolikelihood\")\nMakie.lines!(ax, get(history_u, :lpl)..., label=\"normal\")\nMakie.lines!(ax, get(history_c, :lpl)..., label=\"centered\")\nMakie.axislegend(ax, position=:rb)\nfig","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Seconds per epoch.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"fig = Makie.Figure(resolution=(600, 300))\nax = Makie.Axis(fig[1,1], xlabel=\"epoch\", ylabel=\"seconds\")\nMakie.lines!(ax, get(history_u, :Δt)..., label=\"normal\")\nMakie.lines!(ax, get(history_c, :Δt)..., label=\"centered\")\nMakie.axislegend(ax, position=:rt)\nfig","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Log-pseudolikelihood vs. computation time instead of epoch count.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"fig = Makie.Figure(resolution=(600, 300))\nax = Makie.Axis(fig[1,1], xlabel=\"seconds\", ylabel=\"pseudolikelihood\")\nMakie.lines!(ax, cumsum(get(history_u, :Δt)[2]), get(history_u, :lpl)[2], label=\"normal\")\nMakie.lines!(ax, cumsum(get(history_c, :Δt)[2]), get(history_c, :lpl)[2], label=\"centered\")\nMakie.axislegend(ax, position=:rb)\nfig","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Now we do the Gibbs sampling to generate RBM digits.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"nrows, ncols = 10, 15\n@time fantasy_x_c = RBMs.sample_v_from_v(rbm_c, bitrand(28,28,nrows*ncols); steps=10000)\n@time fantasy_x_u = RBMs.sample_v_from_v(rbm_u, bitrand(28,28,nrows*ncols); steps=10000)\nnothing #hide","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Plot the resulting samples.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Normal RBM.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"fig = Makie.Figure(resolution=(40ncols, 40nrows))\nax = Makie.Axis(fig[1,1], yreversed=true)\nMakie.image!(ax, imggrid(reshape(fantasy_x_u, 28, 28, ncols, nrows)), colorrange=(1,0))\nMakie.hidedecorations!(ax)\nMakie.hidespines!(ax)\nfig","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"Centered RBM.","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"fig = Makie.Figure(resolution=(40ncols, 40nrows))\nax = Makie.Axis(fig[1,1], yreversed=true)\nMakie.image!(ax, imggrid(reshape(fantasy_x_c, 28, 28, ncols, nrows)), colorrange=(1,0))\nMakie.hidedecorations!(ax)\nMakie.hidespines!(ax)\nfig","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"","category":"page"},{"location":"literate/MNIST/","page":"MNIST","title":"MNIST","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [CenteredRBMs]","category":"page"},{"location":"reference/#CenteredRBMs.CenteredRBM-Tuple{RestrictedBoltzmannMachines.AbstractLayer, RestrictedBoltzmannMachines.AbstractLayer, AbstractArray}","page":"Reference","title":"CenteredRBMs.CenteredRBM","text":"CenteredRBM(visible, hidden, w)\n\nCreates a centered RBM, with offsets initialized to zero.\n\n\n\n\n\n","category":"method"},{"location":"reference/#RestrictedBoltzmannMachines.RBM-Tuple{CenteredRBMs.CenteredRBM}","page":"Reference","title":"RestrictedBoltzmannMachines.RBM","text":"RBM(centered_rbm::CenteredRBM)\n\nReturns an (uncentered) RBM which neglects the offsets of centered_rbm. The resulting model is not equivalent to the original centered_rbm. To construct an equivalent model, use the function uncenter(centered_rbm) instead (see uncenter). Shares parameters with centered_rbm.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CenteredRBMs.CenteredBinaryRBM-NTuple{5, AbstractArray}","page":"Reference","title":"CenteredRBMs.CenteredBinaryRBM","text":"CenteredBinaryRBM(a, b, w, offset_v = 0, offset_h = 0)\n\nConstruct a centered RBM with binary visible and hidden units\n\n\n\n\n\n","category":"method"},{"location":"reference/#CenteredRBMs.center!-Tuple{CenteredRBMs.CenteredRBM, AbstractArray, AbstractArray}","page":"Reference","title":"CenteredRBMs.center!","text":"center!(centered_rbm, offset_v = 0, offset_h = 0)\n\nTransforms the offsets of centered_rbm. The transformed model is equivalent to the original one (energies differ by a constant).\n\n\n\n\n\n","category":"method"},{"location":"reference/#CenteredRBMs.center-Tuple{RestrictedBoltzmannMachines.RBM, AbstractArray, AbstractArray}","page":"Reference","title":"CenteredRBMs.center","text":"center(rbm::RBM, offset_v = 0, offset_h = 0)\n\nConstructs a CenteredRBM equivalent to the given rbm. The energies assigned by the two models differ by a constant amount,\n\nE(vh) - E_c(vh) = sum_imuw_imulambda_ilambda_mu\n\nwhere E(vh) is the energy assigned by the original rbm, and E_c(vh) is the energy assigned by the returned CenteredRBM.\n\nThis is the inverse operation of uncenter.\n\nTo construct a CenteredRBM that simply includes these offsets, call CenteredRBM(rbm, offset_v, offset_h) instead.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CenteredRBMs.pcdc!-Tuple{RestrictedBoltzmannMachines.RBM, AbstractArray}","page":"Reference","title":"CenteredRBMs.pcdc!","text":"pcdc!(rbm, data)\n\nTrains the RBM on data using Persistent Contrastive divergence, with centered gradients. See:\n\nJ. Melchior, A. Fischer, and L. Wiskott. JMLR 17.1 (2016): 3387-3447. http://jmlr.org/papers/v17/14-237.html\n\n\n\n\n\n","category":"method"},{"location":"reference/#CenteredRBMs.shift_fields!","page":"Reference","title":"CenteredRBMs.shift_fields!","text":"shift_fields!(layer, offset)\n\nAdds offset to the layer fields.\n\n\n\n\n\n","category":"function"},{"location":"reference/#CenteredRBMs.uncenter-Tuple{CenteredRBMs.CenteredRBM}","page":"Reference","title":"CenteredRBMs.uncenter","text":"uncenter(centered_rbm::CenteredRBM)\n\nConstructs an RBM equivalent to the given CenteredRBM. The energies assigned by the two models differ by a constant amount,\n\nE(vh) - E_c(vh) = sum_imuw_imulambda_ilambda_mu\n\nwhere E_c(vh) is the energy assigned by centered_rbm and E(vh) is the energy assigned by the RBM constructed by this method.\n\nThis is the inverse operation of center.\n\nTo construct an RBM that simply neglects the offsets, call RBM(centered_rbm) instead.\n\n\n\n\n\n","category":"method"},{"location":"#CenteredRBMs.jl-Documentation","page":"Home","title":"CenteredRBMs.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package to train and simulate centered Restricted Boltzmann Machines. See http://jmlr.org/papers/v17/14-237.html for the definition of centered.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package does not export any symbols.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Most of the functions have a helpful docstring. See Reference section.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is not registered. Install with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(url=\"https://github.com/cossio/CenteredRBMs.jl\")","category":"page"},{"location":"#Related","page":"Home","title":"Related","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is based on the RestrictedBoltzmannMachines Julia package, which defines the RBM and layer types. We refer to RestrictedBoltzmannMachines by the shorter name RBMs, as if it were imported by the line","category":"page"},{"location":"","page":"Home","title":"Home","text":"import RestrictedBoltzmannMachines as RBMs","category":"page"}]
}
